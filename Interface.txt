Q* Key points on Interfaces=>

1. Methods in interfaces are implicitly public and abstract unless declared as default or static.
2. An interface can extend multiple interfaces using a comma-separated list.
3. Using an interface, we can achieve full abstraction, meaning we define WHAT a class must do but not HOW it will do it.
4. You cannot create an object of an interface directly but can create an object of a concrete class that implements the interface.
5. Interfaces support multiple inheritance.
6. Interfaces are a way to achieve abstraction in Java.
7. An interface can be used as a type to hold a reference to an object of a class that implements the interface, which helps in achieving polymorphism. Method calls are resolved at runtime.
8. (Redundant as it repeats point 5) Interfaces allow a class to inherit from multiple interfaces.
9. An interface typically contains method signatures (abstract methods) only, but can also have default and static methods since Java 8.

------------------------------------------------------------------------------------------------------------------------------

1. why methods inside interface can not declared as final ?
Ans => In Java, methods inside an interface cannot be declared as final because the purpose of an interface is to define a contract that classes can implement, not to provide concrete implementations that cannot be changed.

Here are the main reasons:

* Abstract Nature of Interfaces: Interfaces are meant to be implemented by other classes. They define a set of methods that the implementing classes must provide. A final method, on the other hand, cannot be overridden by subclasses. This is fundamentally at odds with the purpose of interfaces, which are intended to be extended or implemented by other classes.

* Inheritance and Polymorphism: The power of interfaces lies in their ability to allow different classes to implement the same set of methods in their own way, promoting polymorphism. Declaring a method as final would prevent a class from providing its own implementation, thus defeating the purpose of using interfaces.

* Default Methods: Since Java 8, interfaces can have default methods. These are methods with a default implementation. However, even default methods are not final because they can still be overridden by implementing classes.

-----------------------------------------------------------------------------------------------------------------------------


Ques => what is the purpose of providing final keyword to a method ?
Ans => The final keyword in Java can be applied to classes, methods, and variables. When applied to methods, its primary purpose is to prevent the method from being overridden in subclasses. This can be useful for several reasons:

 **Preserve Implementation Integrity: If a method's implementation is critical to the class's functionality and should not be altered, marking it as final ensures that it remains unchanged in any subclass. This can help maintain the integrity and correct functioning of the class.

 **Enhance Security: In some cases, you may want to ensure that certain methods cannot be modified to enhance security. By marking these methods as final, you can prevent subclasses from altering their behavior.

 **Improve Performance: The Java compiler and the Java Virtual Machine (JVM) can optimize calls to final methods more effectively than calls to non-final methods. This is because the compiler knows that the method cannot be overridden, allowing for more efficient method invocation.

 **Design Clarity: Using final can make the design of a class clearer. It explicitly communicates to other developers that the method is not intended to be overridden, which can help in understanding the class's intended usage.

-----------------------------------------------------------------------------------------------------------------------------
